# gl_core/cli/main.py
import argparse
import json
import logging
from pathlib import Path
from decimal import Decimal

from gl_core.models import AccountChart, Ledger, JournalEntry, JournalLine
from gl_core.services import generate_balance_sheet, generate_income_statement, close_year


def setup_logging(level: str):
    numeric_level = getattr(logging, level.upper(), logging.INFO)
    logging.basicConfig(
        level=numeric_level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )


def decimal_serializer(obj):
    """
    Serializer to convert Decimal to string for JSON output.
    """
    if isinstance(obj, Decimal):
        return str(obj)  # Use str to preserve precision
    raise TypeError(f"Object of type {type(obj)} is not JSON serializable")


def load_ledger_with_coa():
    """
    Load the ledger with the Chart of Accounts (COA).
    """
    coa_path = Path(__file__).parent.parent / "config" / "tt133_coa.yaml"
    coa = AccountChart.from_yaml(str(coa_path))
    return Ledger(coa)


def post_journal(args):
    ledger = load_ledger_with_coa()

    with open(args.file, "r", encoding="utf-8") as f:
        data = json.load(f)

    lines = [
        JournalLine(
            account_code=line["account_code"],
            debit=Decimal(str(line.get("debit", 0))),
            credit=Decimal(str(line.get("credit", 0)))
        )
        for line in data["lines"]
    ]
    entry = JournalEntry(date=data["date"], lines=lines, description=data.get("description", ""))

    ledger.post(entry)
    print(f"‚úÖ Ghi s·ªï th√†nh c√¥ng: {entry.date}")


def generate_report(args):
    ledger = load_ledger_with_coa()

    # Lo·∫°i b·ªè d·ªØ li·ªáu m·∫´u, ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ ledger
    if args.type == "B01-DNN":
        config_path = Path(__file__).parent.parent / "config" / "reports" / "b01_dnn.yaml"
        report = generate_balance_sheet(ledger, str(config_path), period=args.period)
    elif args.type == "B02-DNN":
        config_path = Path(__file__).parent.parent / "config" / "reports" / "b02_dnn.yaml"
        report = generate_income_statement(ledger, str(config_path), period=args.period)
    else:
        print("‚ùå Lo·∫°i b√°o c√°o kh√¥ng h·ªó tr·ª£")
        return

    # S·ª≠ d·ª•ng serializer ƒë·ªÉ chuy·ªÉn Decimal sang string
    print(json.dumps(report, ensure_ascii=False, indent=2, default=decimal_serializer))


def close_year_cli(args):
    ledger = load_ledger_with_coa()

    # Lo·∫°i b·ªè d·ªØ li·ªáu m·∫´u, ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ ledger
    print(f"üîÑ ƒêang k·∫øt chuy·ªÉn nƒÉm {args.year}...")
    closing_entry = close_year(ledger, int(args.year))
    print(f"‚úÖ K·∫øt chuy·ªÉn ho√†n t·∫•t. Ghi s·ªï: {len(closing_entry.lines)} d√≤ng.")


def main():
    parser = argparse.ArgumentParser(description="CLI tool cho GL engine Vi·ªát Nam")
    
    # Th√™m subparsers
    subparsers = parser.add_subparsers(dest="command", help="C√°c l·ªánh h·ªó tr·ª£")

    # L·ªánh ghi s·ªï
    post_parser = subparsers.add_parser("post", help="Ghi b√∫t to√°n")
    post_parser.add_argument("--file", required=True, help="ƒê∆∞·ªùng d·∫´n file JSON ch·ª©a journal")
    post_parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"], help="M·ª©c log")

    # L·ªánh sinh b√°o c√°o
    report_parser = subparsers.add_parser("report", help="Sinh b√°o c√°o t√†i ch√≠nh")
    report_parser.add_argument("--type", required=True, choices=["B01-DNN", "B02-DNN"], help="Lo·∫°i b√°o c√°o")
    report_parser.add_argument("--period", required=True, help="K·ª≥ b√°o c√°o (v√≠ d·ª•: 2025-Q1)")
    report_parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"], help="M·ª©c log")

    # L·ªánh k·∫øt chuy·ªÉn cu·ªëi nƒÉm
    close_parser = subparsers.add_parser("close-year", help="K·∫øt chuy·ªÉn cu·ªëi nƒÉm")
    close_parser.add_argument("--year", required=True, help="NƒÉm c·∫ßn k·∫øt chuy·ªÉn")
    close_parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"], help="M·ª©c log")

    args = parser.parse_args()

    # C·∫•u h√¨nh logging d·ª±a tr√™n ƒë·ªëi s·ªë c·ªßa t·ª´ng l·ªánh
    setup_logging(getattr(args, 'log_level', 'INFO'))

    if args.command == "post":
        post_journal(args)
    elif args.command == "report":
        generate_report(args)
    elif args.command == "close-year":
        close_year_cli(args)
    else:
        parser.print_help()