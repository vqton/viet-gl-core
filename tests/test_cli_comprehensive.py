# tests/test_cli_comprehensive.py
import json
import tempfile
import pytest
from decimal import Decimal, InvalidOperation
from pathlib import Path
from unittest.mock import patch, mock_open

from gl_core.cli.main import post_journal, generate_report, close_year_cli, decimal_serializer
from gl_core.models import JournalEntry, JournalLine


@pytest.fixture
def sample_journal_file():
    """
    T·∫°o file JSON m·∫´u h·ª£p l·ªá
    """
    journal_data = {
        "date": "2025-04-01",
        "description": "B√°n h√†ng thu ti·ªÅn m·∫∑t",
        "lines": [
            {
                "account_code": "1111",
                "debit": 11000000
            },
            {
                "account_code": "3331",
                "credit": 1000000
            },
            {
                "account_code": "5111",
                "credit": 10000000
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        return f.name


@pytest.fixture
def invalid_journal_file():
    """
    T·∫°o file JSON kh√¥ng h·ª£p l·ªá (thi·∫øu tr∆∞·ªùng, sai ki·ªÉu d·ªØ li·ªáu)
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": [
            {
                "account_code": "1111",
                "debit": "invalid_decimal"  # Sai ki·ªÉu d·ªØ li·ªáu
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        return f.name


# === UNIT TESTS ===

def test_post_journal_success(capsys, sample_journal_file):
    """
    ‚úÖ Test ghi s·ªï th√†nh c√¥ng
    """
    class Args:
        file = sample_journal_file
    
    args = Args()
    post_journal(args)
    
    captured = capsys.readouterr()
    assert "‚úÖ Ghi s·ªï th√†nh c√¥ng: 2025-04-01" in captured.out


def test_post_journal_invalid_file():
    """
    ‚ùå Test ghi s·ªï v·ªõi file kh√¥ng t·ªìn t·∫°i
    """
    class Args:
        file = "non_existent_file.json"
    
    args = Args()
    
    with pytest.raises(FileNotFoundError):
        post_journal(args)


def test_post_journal_invalid_json():
    """
    ‚ùå Test ghi s·ªï v·ªõi file JSON sai c·∫•u tr√∫c
    """
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        f.write("invalid json content")
    
    class Args:
        file = f.name
    
    args = Args()
    
    with pytest.raises(json.JSONDecodeError):
        post_journal(args)


def test_post_journal_invalid_decimal_data(capsys, invalid_journal_file):
    """
    ‚ùå Test ghi s·ªï v·ªõi d·ªØ li·ªáu Decimal kh√¥ng h·ª£p l·ªá
    """
    class Args:
        file = invalid_journal_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    with pytest.raises(InvalidOperation):
        post_journal(args)


def test_generate_report_balance_sheet_success(capsys):
    """
    ‚úÖ Test sinh b√°o c√°o B01-DNN th√†nh c√¥ng
    """
    class Args:
        type = "B01-DNN"
        period = "2025-Q1"
    
    args = Args()
    generate_report(args)
    
    captured = capsys.readouterr()
    output = captured.out.strip()
    report = json.loads(output)
    
    assert report["report_type"] == "B01-DNN"
    assert report["period"] == "2025-Q1"


def test_generate_report_income_statement_success(capsys):
    """
    ‚úÖ Test sinh b√°o c√°o B02-DNN th√†nh c√¥ng
    """
    class Args:
        type = "B02-DNN"
        period = "2025-Q1"
    
    args = Args()
    generate_report(args)
    
    captured = capsys.readouterr()
    output = captured.out.strip()
    report = json.loads(output)
    
    assert report["report_type"] == "B02-DNN"
    assert report["period"] == "2025-Q1"


def test_generate_report_invalid_type(capsys):
    """
    ‚ùå Test lo·∫°i b√°o c√°o kh√¥ng h·ª£p l·ªá
    """
    class Args:
        type = "INVALID-TYPE"
        period = "2025-Q1"
    
    args = Args()
    generate_report(args)
    
    captured = capsys.readouterr()
    assert "‚ùå Lo·∫°i b√°o c√°o kh√¥ng h·ªó tr·ª£" in captured.out

def test_close_year_success(capsys):
    """
    ‚úÖ Test k·∫øt chuy·ªÉn cu·ªëi nƒÉm th√†nh c√¥ng (c√≥ d·ªØ li·ªáu m·∫´u)
    """
    # Ghi d·ªØ li·ªáu m·∫´u tr∆∞·ªõc khi k·∫øt chuy·ªÉn
    from gl_core.models import Ledger, JournalEntry, JournalLine, AccountChart
    from pathlib import Path
    from decimal import Decimal
    
    coa = AccountChart.from_yaml(
        str(Path(__file__).parent.parent / "gl_core" / "config" / "tt133_coa.yaml")
    )
    ledger = Ledger(coa)
    
    # Ghi doanh thu v√† chi ph√≠ ƒë·ªÉ c√≥ g√¨ ƒë·ªÉ k·∫øt chuy·ªÉn
    entry1 = JournalEntry(
        date="2025-04-01",
        lines=[
            JournalLine("1111", debit=Decimal("10000000")),
            JournalLine("5111", credit=Decimal("10000000")),
        ]
    )
    entry2 = JournalEntry(
        date="2025-04-02",
        lines=[
            JournalLine("632", debit=Decimal("3000000")),
            JournalLine("156", credit=Decimal("3000000")),
        ]
    )
    ledger.post(entry1)
    ledger.post(entry2)
    
    # K·∫øt chuy·ªÉn
    from gl_core.services import close_year
    closing_entry = close_year(ledger, 2025)
    
    # Ki·ªÉm tra k·∫øt qu·∫£
    assert closing_entry is not None
    assert len(closing_entry.lines) > 0


def test_cli_integration_close_year_and_report(capsys):
    """
    ‚úÖ Test t√≠ch h·ª£p: k·∫øt chuy·ªÉn ‚Üí sinh b√°o c√°o (c√≥ d·ªØ li·ªáu m·∫´u)
    """
    # T∆∞∆°ng t·ª± nh∆∞ tr√™n
    from gl_core.models import Ledger, JournalEntry, JournalLine, AccountChart
    from pathlib import Path
    from decimal import Decimal
    
    coa = AccountChart.from_yaml(
        str(Path(__file__).parent.parent / "gl_core" / "config" / "tt133_coa.yaml")
    )
    ledger = Ledger(coa)
    
    # Ghi doanh thu v√† chi ph√≠
    entry1 = JournalEntry(
        date="2025-04-01",
        lines=[
            JournalLine("1111", debit=Decimal("10000000")),
            JournalLine("5111", credit=Decimal("10000000")),
        ]
    )
    entry2 = JournalEntry(
        date="2025-04-02",
        lines=[
            JournalLine("632", debit=Decimal("3000000")),
            JournalLine("156", credit=Decimal("3000000")),
        ]
    )
    ledger.post(entry1)
    ledger.post(entry2)
    
    # K·∫øt chuy·ªÉn
    from gl_core.services import close_year
    closing_entry = close_year(ledger, 2025)
    
    # Sinh b√°o c√°o
    from gl_core.services import generate_income_statement
    config_path = Path(__file__).parent.parent / "gl_core" / "config" / "reports" / "b02_dnn.yaml"
    report = generate_income_statement(ledger, str(config_path), period="2025-Q1")
    
    assert report["report_type"] == "B02-DNN"
    assert "Doanh thu" in report["data"]

# def test_close_year_success(capsys):
#     """
#     ‚úÖ Test k·∫øt chuy·ªÉn cu·ªëi nƒÉm th√†nh c√¥ng
#     """
#     class Args:
#         year = "2025"
    
#     args = Args()
#     close_year_cli(args)
    
#     captured = capsys.readouterr()
#     assert "üîÑ ƒêang k·∫øt chuy·ªÉn nƒÉm 2025" in captured.out
#     assert "‚úÖ K·∫øt chuy·ªÉn ho√†n t·∫•t" in captured.out


def test_decimal_serializer_success():
    """
    ‚úÖ Test serializer Decimal th√†nh c√¥ng
    """
    result = decimal_serializer(Decimal("10000000.50"))
    assert result == "10000000.50"


def test_decimal_serializer_invalid():
    """
    ‚ùå Test serializer object kh√¥ng h·ªó tr·ª£
    """
    with pytest.raises(TypeError):
        decimal_serializer("not a decimal")


# === INTEGRATION TESTS ===

def test_cli_integration_post_and_report(capsys, sample_journal_file):
    """
    ‚úÖ Test t√≠ch h·ª£p: ghi s·ªï ‚Üí sinh b√°o c√°o
    """
    # Ghi s·ªï
    class ArgsPost:
        file = sample_journal_file
    
    args_post = ArgsPost()
    post_journal(args_post)
    
    # Sinh b√°o c√°o
    class ArgsReport:
        type = "B01-DNN"
        period = "2025-Q1"
    
    args_report = ArgsReport()
    generate_report(args_report)
    
    captured = capsys.readouterr()
    assert "‚úÖ Ghi s·ªï th√†nh c√¥ng: 2025-04-01" in captured.out
    assert '"report_type": "B01-DNN"' in captured.out


# def test_cli_integration_close_year_and_report(capsys):
#     """
#     ‚úÖ Test t√≠ch h·ª£p: k·∫øt chuy·ªÉn ‚Üí sinh b√°o c√°o
#     """
#     # K·∫øt chuy·ªÉn
#     class ArgsClose:
#         year = "2025"
    
#     args_close = ArgsClose()
#     close_year_cli(args_close)
    
#     # Sinh b√°o c√°o
#     class ArgsReport:
#         type = "B02-DNN"
#         period = "2025-Q1"
    
#     args_report = ArgsReport()
#     generate_report(args_report)
    
#     captured = capsys.readouterr()
#     assert "‚úÖ K·∫øt chuy·ªÉn ho√†n t·∫•t" in captured.out
#     assert '"report_type": "B02-DNN"' in captured.out

def test_close_year_success(capsys):
    """
    ‚úÖ Test k·∫øt chuy·ªÉn cu·ªëi nƒÉm th√†nh c√¥ng (c√≥ d·ªØ li·ªáu m·∫´u)
    """
    # Ghi d·ªØ li·ªáu m·∫´u tr∆∞·ªõc khi k·∫øt chuy·ªÉn
    from gl_core.models import Ledger, JournalEntry, JournalLine, AccountChart
    from pathlib import Path
    from decimal import Decimal
    
    coa = AccountChart.from_yaml(
        str(Path(__file__).parent.parent / "gl_core" / "config" / "tt133_coa.yaml")
    )
    ledger = Ledger(coa)
    
    # Ghi doanh thu v√† chi ph√≠ ƒë·ªÉ c√≥ g√¨ ƒë·ªÉ k·∫øt chuy·ªÉn
    entry1 = JournalEntry(
        date="2025-04-01",
        lines=[
            JournalLine("1111", debit=Decimal("10000000")),
            JournalLine("5111", credit=Decimal("10000000")),
        ]
    )
    entry2 = JournalEntry(
        date="2025-04-02",
        lines=[
            JournalLine("632", debit=Decimal("3000000")),
            JournalLine("156", credit=Decimal("3000000")),
        ]
    )
    ledger.post(entry1)
    ledger.post(entry2)
    
    # K·∫øt chuy·ªÉn
    from gl_core.services import close_year
    closing_entry = close_year(ledger, 2025)
    
    # Ki·ªÉm tra k·∫øt qu·∫£
    assert closing_entry is not None
    assert len(closing_entry.lines) > 0


def test_cli_integration_close_year_and_report(capsys):
    """
    ‚úÖ Test t√≠ch h·ª£p: k·∫øt chuy·ªÉn ‚Üí sinh b√°o c√°o (c√≥ d·ªØ li·ªáu m·∫´u)
    """
    # T∆∞∆°ng t·ª± nh∆∞ tr√™n
    from gl_core.models import Ledger, JournalEntry, JournalLine, AccountChart
    from pathlib import Path
    from decimal import Decimal
    
    coa = AccountChart.from_yaml(
        str(Path(__file__).parent.parent / "gl_core" / "config" / "tt133_coa.yaml")
    )
    ledger = Ledger(coa)
    
    # Ghi doanh thu v√† chi ph√≠
    entry1 = JournalEntry(
        date="2025-04-01",
        lines=[
            JournalLine("1111", debit=Decimal("10000000")),
            JournalLine("5111", credit=Decimal("10000000")),
        ]
    )
    entry2 = JournalEntry(
        date="2025-04-02",
        lines=[
            JournalLine("632", debit=Decimal("3000000")),
            JournalLine("156", credit=Decimal("3000000")),
        ]
    )
    ledger.post(entry1)
    ledger.post(entry2)
    
    # K·∫øt chuy·ªÉn
    from gl_core.services import close_year
    closing_entry = close_year(ledger, 2025)
    
    # Sinh b√°o c√°o
    from gl_core.services import generate_income_statement
    config_path = Path(__file__).parent.parent / "gl_core" / "config" / "reports" / "b02_dnn.yaml"
    report = generate_income_statement(ledger, str(config_path), period="2025-Q1")
    
    assert report["report_type"] == "B02-DNN"
    assert "Doanh thu" in report["data"]
# === EDGE CASE TESTS ===

def test_post_journal_empty_lines():
    """
    ‚ùå Test ghi s·ªï v·ªõi journal kh√¥ng c√≥ d√≤ng
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": []
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ kh√¥ng c√≥ d√≤ng
    with pytest.raises(ValueError):
        post_journal(args)


def test_post_journal_unbalanced():
    """
    ‚ùå Test ghi s·ªï v·ªõi b√∫t to√°n kh√¥ng c√¢n b·∫±ng
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": [
            {
                "account_code": "1111",
                "debit": 10000000
            },
            {
                "account_code": "5111",
                "credit": 9000000  # Thi·∫øu 1 tri·ªáu
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ kh√¥ng c√¢n b·∫±ng
    with pytest.raises(ValueError, match="unbalanced"):
        post_journal(args)


def test_post_journal_unknown_account():
    """
    ‚ùå Test ghi s·ªï v·ªõi t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": [
            {
                "account_code": "9999",  # T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i
                "debit": 10000000
            },
            {
                "account_code": "5111",
                "credit": 10000000
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i
    with pytest.raises(ValueError, match="not defined"):
        post_journal(args)


# def test_post_journal_negative_amount():
#     """
#     ‚ùå Test ghi s·ªï v·ªõi s·ªë ti·ªÅn √¢m
#     """
#     journal_data = {
#         "date": "2025-04-01",
#         "lines": [
#             {
#                 "account_code": "1111",
#                 "debit": -10000000  # S·ªë √¢m
#             },
#             {
#                 "account_code": "5111",
#                 "credit": 10000000
#             }
#         ]
#     }
    
#     with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
#         json.dump(journal_data, f, ensure_ascii=False, indent=2)
#         temp_file = f.name
    
#     class Args:
#         file = temp_file
    
#     args = Args()
    
#     # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ s·ªë ti·ªÅn √¢m
#     with pytest.raises(ValueError, match="negative amounts"):
#         post_journal(args)

def test_post_journal_negative_amount():
    """
    ‚ùå Test ghi s·ªï v·ªõi s·ªë ti·ªÅn √¢m
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": [
            {
                "account_code": "1111",
                "debit": -10000000  # S·ªë √¢m
            },
            {
                "account_code": "5111",
                "credit": 10000000
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ s·ªë ti·ªÅn √¢m
    with pytest.raises(ValueError, match="non-negative"):  # S·ª≠a regex
        post_journal(args)

def test_post_journal_both_debit_credit():
    """
    ‚ùå Test ghi s·ªï v·ªõi d√≤ng c√≥ c·∫£ N·ª£ v√† C√≥
    """
    journal_data = {
        "date": "2025-04-01",
        "lines": [
            {
                "account_code": "1111",
                "debit": 10000000,
                "credit": 10000000  # C·∫£ N·ª£ v√† C√≥
            }
        ]
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    
    # Ghi s·ªï s·∫Ω th·∫•t b·∫°i v√¨ c√≥ c·∫£ N·ª£ v√† C√≥
    with pytest.raises(ValueError, match="cannot have both"):
        post_journal(args)


# === PERFORMANCE TESTS ===

def test_post_journal_large_entries(capsys):
    """
    ‚úÖ Test hi·ªáu nƒÉng: ghi s·ªï v·ªõi nhi·ªÅu d√≤ng
    """
    # T·∫°o journal v·ªõi 1000 d√≤ng
    lines = []
    for i in range(1000):
        lines.append({
            "account_code": "1111",
            "debit": 1000
        })
        lines.append({
            "account_code": "5111",
            "credit": 1000
        })
    
    journal_data = {
        "date": "2025-04-01",
        "lines": lines
    }
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(journal_data, f, ensure_ascii=False, indent=2)
        temp_file = f.name
    
    class Args:
        file = temp_file
    
    args = Args()
    post_journal(args)
    
    captured = capsys.readouterr()
    assert "‚úÖ Ghi s·ªï th√†nh c√¥ng" in captured.out


# === MOCKING TESTS ===

# def test_post_journal_with_mocked_file(capsys):
#     """
#     ‚úÖ Test ghi s·ªï v·ªõi file ƒë∆∞·ª£c mock
#     """
#     mock_data = json.dumps({
#         "date": "2025-04-01",
#         "lines": [
#             {
#                 "account_code": "1111",
#                 "debit": 10000000
#             },
#             {
#                 "account_code": "5111",
#                 "credit": 10000000
#             }
#         ]
#     }, ensure_ascii=False, indent=2)
    
#     with patch("builtins.open", mock_open(read_data=mock_data)):
#         class Args:
#             file = "dummy.json"
        
#         args = Args()
#         post_journal(args)
    
#     captured = capsys.readouterr()
#     assert "‚úÖ Ghi s·ªï th√†nh c√¥ng" in captured.out


def test_generate_report_with_mocked_ledger(capsys):
    """
    ‚úÖ Test sinh b√°o c√°o v·ªõi ledger ƒë∆∞·ª£c mock
    """
    # Mock to√†n b·ªô qu√° tr√¨nh
    with patch("gl_core.cli.main.load_ledger_with_coa") as mock_load_ledger:
        # T·∫°o mock ledger
        mock_ledger = MockLedger()
        mock_load_ledger.return_value = mock_ledger
        
        class Args:
            type = "B01-DNN"
            period = "2025-Q1"
        
        args = Args()
        generate_report(args)
        
        captured = capsys.readouterr()
        # Ki·ªÉm tra ƒë·∫ßu ra
        assert '"report_type": "B01-DNN"' in captured.out


class MockLedger:
    """
    Mock object cho Ledger ƒë·ªÉ test
    """
    def get_trial_balance(self):
        return {
            "1111": {"debit": Decimal("10000000"), "credit": Decimal("0")},
            "5111": {"debit": Decimal("0"), "credit": Decimal("10000000")},
        }
    
    def post(self, entry):
        pass